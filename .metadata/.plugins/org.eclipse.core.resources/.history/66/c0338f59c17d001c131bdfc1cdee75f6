package ques1;

package ques1;



import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.function.Consumer;




enum MySigleton{
INSTANCE;
//
}





class SingletonQues implements Serializable, Cloneable{

/**
*
*/
private static final long serialVersionUID = 1L;
private static volatile Singleton singleton = null;



private SingletonQues() {
if(singleton!=null) {
throw new IllegalStateException();
}
}



// t1 t2
public static Singleton getSingleton() {
if (singleton == null) {
synchronized (Singleton.class) {
if (singleton == null) {
singleton = new Singleton();
}
}
}



return singleton;
}

//if u have defined the readResolve method then java will not for for de-ser
//

private Object readResolve() {
System.out.println("if u have defined the readResolve method then java will not for for de-ser");
return singleton;
}



@Override
protected Object clone() throws CloneNotSupportedException {
return singleton;
//throw new CloneNotSupportedException();
}



}



public class SingletonQues {



public static void main(String[] args) throws FileNotFoundException, IOException, ClassNotFoundException, CloneNotSupportedException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {




MySigleton mySigleton=MySigleton.INSTANCE;
//MySigleton mySigleton2=MySigleton.INSTANCE;

System.out.println(mySigleton.hashCode());
//System.out.println(mySigleton2.hashCode());


ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream("demo.txt"));
oos.writeObject(mySigleton);

ObjectInputStream ois=new ObjectInputStream(new FileInputStream("demo.txt"));
MySigleton singleton2=(MySigleton) ois.readObject();

System.out.println(singleton2.hashCode());

}}
